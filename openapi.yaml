openapi: 3.0.1
info:
  title: Swagger ticket store
  description: 'This is a sample server ticket store server.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://petstore.swagger.io/v2
- url: http://petstore.swagger.io/v2
tags:
- name: ticket
  description: Everything about your tickets
- name: store
  description: Access to ticket orders
- name: user
  description: Operations about user
paths:
  /ticket:
    put:
      tags:
      - ticket
      summary: Update an existing ticket
      operationId: updateTicket
      requestBody:
        description: Ticket object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
          application/xml:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Ticket not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - ticketstore_auth:
        - write:tickets
        - read:tickets
      x-codegen-request-body-name: body
    post:
      tags:
      - ticket
      summary: Add a new ticket to the store
      operationId: addTicket
      requestBody:
        description: Created ticket object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        200:
          description: Succesfully
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - ticketstore_auth:
        - write:tickets
        - read:tickets
        
      x-codegen-request-body-name: body
  /ticket/findByStatus:
    get:
      tags:
      - ticket
      summary: Finds tickets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - booked
            - pending
            - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        400:
          description: Invalid status value
          content: {}
      security:
      - ticketstore_auth:
        - write:tickets
        - read:tickets
  /ticket/findByTags:
    get:
      tags:
      - ticket
      summary: Finds tickets by tags
      description: Muliple tags can be provided with comma separated strings. Use         tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        400:
          description: Invalid tag value
          content: {}
      deprecated: false
      security:
      - ticketstore_auth:
        - write:tickets
        - read:tickets
  /ticket/{ticketId}:
    get:
      tags:
      - ticket
      summary: Find ticket by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - name: ticketId
        in: path
        description: ID of ticket to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Ticket not found
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - ticket
      summary: Updates a ticket in the store with form data
      operationId: updatePetWithForm
      parameters:
      - name: ticketId
        in: path
        description: ID of pet that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the pet
                status:
                  type: string
                  description: Updated status of the pet
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - ticketstore_auth:
        - write:tickets
        - read:tickets
    delete:
      tags:
      - ticket
      summary: Deletes a ticket
      operationId: deletePet
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: ticketId
        in: path
        description: Pet id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
      security:
      - ticketstore_auth:
        - write:tickets
        - read:tickets
  /ticket/{ticketId}/uploadImage:
    post:
      tags:
      - ticket
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: ticketId
        in: path
        description: ID of ticket to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - ticketstore_auth:
        - write:tickets
        - read:tickets
  /store/inventory:
    get:
      tags:
      - store
      summary: Returns ticket inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
        404:
          description: 'Null' 
      security:
      - api_key: []
  /store/reservation:
    post:
      tags:
      - store
      summary: Place a reservation for a ticket
      requestBody:
        description: placed for reservation the ticket
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        400:
          description: Invalid reservation
          content: {}
      security:
      - api_key: []
      x-codegen-request-body-name: body
  /store/reservation/{reservationId}:
    get:
      tags:
      - store
      summary: Find reservation by ID
      #description: For valid response try integer IDs with value >= 1 and <= 10.         Other
        #values will generated exceptions
      operationId: getReservationById
      parameters:
      - name: reservationId
        in: path
        description: ID of ticket that needs to be fetched
        required: true
        schema:
          #maximum: 10.0
          #minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Reservation not found
          content: {}
      security:
      - api_key: []
    delete:
      tags:
      - store
      summary: Delete reservation by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteBooking
      parameters:
      - name: reservationId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Booking not found
          content: {}
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a ticket
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the pet
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
      security:
      - api_key: []
      x-codegen-request-body-name: body
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: 'Find purchase order by ID'
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
      security:
      - api_key: []
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
      security:
      - api_key: []
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
        400:
          description: Invalid input
      x-codegen-request-body-name: body
 
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ticketId:
          type: integer
          format: int64
        status:
          type: string
          description: Reservation Status
          enum:
          - waiting
          - payed
        complete:
          type: boolean
          default: false
      xml:
        name: Booking
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ticketId:
          type: integer
          format: int64
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - payed
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Ticket:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: jazz concert
        location:
          type: string
          example: 'Lviv'
        description:
          type: string
        price:
          type: integer
          format: int64
          example: 500
        time:
          type: string
          format: date-time
        endTimeReservation:
          type: string
          format: date-time
        reservationPrice:
          type: integer
          format: int32
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: ticket status in the store
          enum:
          - available
          - pending
          - sold
          - reserved
      xml:
        name: ticket
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    ticketstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:tickets: modify tickets in your account
            read:tickets: read your tickets
    api_key:
      type: apiKey
      name: api_key
      in: header
